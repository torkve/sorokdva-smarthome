import typing
from aiohttp import web
from authlib.oauth2 import AuthorizationServer as _AuthorizationServer, OAuth2Request
from authlib.oauth2.rfc7009 import RevocationEndpoint as _RevocationEndpoint
from dialogs.db import App as App, Token as Token, User as User
from typing import Any


class AuthorizationServer(_AuthorizationServer):
    config: Any = ...
    authentication_client: Any = ...
    def __init__(self, config: typing.Optional[dict]=..., error_uris: typing.Optional[str]=...) -> None: ...
    def get_error_uris(self, request: Any) -> typing.Optional[dict]: ...
    async def create_oauth2_request(self, request: web.Request) -> OAuth2Request: ...
    async def create_endpoint_response(self, name: str, request: web.Request) -> web.Response: ...
    async def create_authorization_response(self, request: web.Request, grant_user: typing.Optional[User]=...) -> web.Response: ...
    async def create_token_response(self, request: web.Request) -> web.Response: ...
    def handle_response(self, status_code: int, payload: typing.Any, headers: dict) -> web.Response: ...
    async def validate_consent_request(self, request: web.Request, end_user: User) -> Any: ...

def query_client(client_id: Any) -> typing.Optional[App]: ...
def save_token(token: Any, request: Any) -> None: ...

class RevocationEndpoint(_RevocationEndpoint):
    CLIENT_AUTH_METHODS: typing.List[str] = ...
    def query_token(self, token: str, token_type_hint: str, client: App) -> typing.Optional[Token]: ...
    def revoke_token(self, token: Token) -> Any: ...

@typing.overload
def create_token_generator(cfg: str, length: int) -> typing.Callable[..., str]: ...
@typing.overload
def create_token_generator(cfg: typing.Callable[..., str], length: int) -> typing.Callable[..., str]: ...
@typing.overload
def create_token_generator(cfg: bool, length: int) -> typing.Optional[typing.Callable[..., str]]: ...
def create_token_expires_in_generator(cfg: typing.Optional[dict]) -> typing.Callable[..., int]: ...
